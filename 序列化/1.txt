1. 实现java.io.Serializable接口,声明static final long serialVersionUID = 5516075349620653480L;
2. serialVersionUID 用来表明类的不同版本间的兼容性,使用到对象串行性的时候.
3. Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的.
4. 如果没有显示的指定serialVersionUID,Java序列化机制会根据编译的class自动生成一个serialVersionUID作序列化版本比较用，这种情况下，只有同一次编译生成的
   class才会生成相同的serialVersionUID.
5. 如果我们不希望通过编译来强制划分软件版本，即实现序列化接口的实体能够兼容先前版本，未作更改的类，就需要显式地定义一个名为serialVersionUID，类型为long的变量，
   不修改这个变量值的序列化实体都可以相互进行串行化和反串行化.
6. 这个值有2中生成方式：
   1) 默认的1L;
   2) 根据类名,接口名,成员方法及属性等来生成一个64位的哈希字段.
7. 我们只要保证在同一个类中，不同版本根据兼容需要，是否更改SerialVersionUid即可.

8. 序列化机制:
  1) 在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，
    否则就会出现序列化版本不一致的异常，即是InvalidCastException.

9. Serializable 则是应用于Java 对象序列化/反序列化。对象的序列化主要有两种用途:
   保存在存储介质上 +  用于网络传输.

   serialVersionUID 是 Java 为每个序列化类产生的版本标识

10. Transient 关键字可以使得字段不被序列化
