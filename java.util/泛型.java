1. 通配符? : extends, super:

  通配符 与 T 的区别
    T：作用于模板上，用于将数据类型进行参数化，不能用于实例化对象。
    ?：在实例化对象的时候，不确定泛型参数的具体类型时，可以使用通配符进行对象定义.

2. 在java泛型中，？ 表示通配符，代表未知类型，< ? extends Object>表示上边界限定通配符，< ? super Object>表示下边界限定通配符

3.
限定通配符总是包括自己
上界类型通配符：add方法受限
下界类型通配符：get方法受限
如果你想从一个数据类型里获取数据，使用 ? extends 通配符
如果你想把对象写入一个数据结构里，使用 ? super 通配符
如果你既想存，又想取，那就别用通配符
不能同时声明泛型通配符上界和下界

4.
  extends 可用于的返回类型限定，不能用于参数类型限定。
  super 可用于参数类型限定，不能用于返回类型限定。

5. T 自定义泛型
   ? 通配符泛型

6. 泛型三种：
          [1]ArrayList<T> al=new ArrayList<T>();指定集合元素只能是T类型
          [2]ArrayList<?> al=new ArrayList<?>();集合元素可以是任意类型，这种没有意义，一般是方法中，只是为了说明用法
          [3]ArrayList<? extends E> al=new ArrayList<? extends E>();

7. 泛型就是变量类型的参数化;

8. 限制方法的参数之间或参数和返回结果之间的关系。
   List<T> getList<T param1,T param2>

9. 二者的使用场景不同:
   T: 声明一个泛型类或者泛型方法. 参数和返回值之间的关系．
   ?: 使用泛型类或泛型方法.

   T"是定义类或方法时声明的东西，"?"是调用时传入的东西，二者是不同的概念。
   使用过程中不依赖于泛型。最典型的是Class<?>，因为Class类的方法大多跟泛型无关

10. 如果类型只在方法声明中出现一次，使用通配符会更好一些，更简单。但是这样只能取，不能放入除了null之外的数据

11. PECS（Producer Extends Consumer Super）原则
   频繁往外读取内容的，适合用上界Extends。
   经常往里插入的，适合用下界Super。
