1.阿里java手册规范：【强制】
  1. 获取单例对象需要保证安全.
  2. 线程需要指定有意义的名称
  3. 线程必须通过线程池提供,不允许自行显式创建.
  4. 线程池的创建必须通过ThreadPoolExecutor的方式创建,不允许使用Executors去创建.
  5. 说明： Executors ExecutorsExecutors Executors ExecutorsExecutors返回的线程池对象 返回的线程池对象 的弊端 如下 ：
   1)FixedThreadPool,SingleThreadPoolPool:允许的请求队列长度为 Integer.MAX_VALUE，可 能会堆积大量的请求，从而导致OOM.
   2)CachedThreadPool,ScheduledThreadPool: 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM.
   OOM(java.lang.OutOfMemoryError);

2. 结构:

1) 创建线程池<管理线程>:
  顶级接口Executor,真正的线程池接口是ExecutorService,默认实现是ThreadPoolExecutor.
  Executors实际调用的也是ThreadPoolExecutor.

2)Executor是一个函数式接口.SAM: void execute(Runnable command)

3)Executor——>ExecutorService——>ScheduledExecutorService.

 ExecutorService ————> AbstractExecutorService  ————>ThreadPoolExecutor

4)理解: Executors.newXXThreadPool()的调用ThreadPoolExecutor.
   Executors是个工具类.

5) ThreadFactory: SAM接口: Thread newThread(Runnable r);

6) ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,TimeUnit,workQueue,ThreadFactory);
allowCoreThreadTimeOut(boolean value);
  true时作用于核心线程.
  false时作用于非核心线程,默认是false;
BlockingQueue workQueue;
  线程池的任务队列,线程池execute(Runnable)将任务存储在workQueue.
concurrent包提供的队列:
  ArrayBlockingQueue
  LinkedBlockingQueue
  SynchronousQueue
  PriorityBlockingQueue
handler：RejectedExecutionHandler（饱和策略接口）当队列和线程池都满了，必须采用一种策略处理新提交的任务


3. 线程池: 线程池——控制线程创建、释放，并通过某种策略尝试复用线程去执行任务的一个管理框架，从而实现线程资源与任务之间一种平衡.
   降低资源消耗 + 提高响应速度 + 提供线程的可管理性;

4. ExecutorService: submit()和execute()的区别
   前者是: 通用的, ExecutorService实现.
   后者只能传入Runnable,没有返回值, Executor实现.
