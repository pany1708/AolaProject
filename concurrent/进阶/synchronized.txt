1. 一个线程执行临界区代码过程如下：
    1 获得同步锁
    2 清空工作内存
    3 从主存拷贝变量副本到工作内存
    4 对这些变量计算
    5 将变量从工作内存写回到主存
    6 释放锁
    可见，synchronized既保证了多线程的并发有序性，又保证了多线程的内存可见性.

2. 最彻底的同步要保证有序性和可见性.

3. volatile只保证了可见性，所以Volatile适合直接赋值的场景.

4. 线程的working memory只是cpu的寄存器和高速缓存的抽象描述.

5. cpu读取顺序： 数据读取顺序优先级是：寄存器－高速缓存－内存

6. 多线程并发问题，涉及到三个特性：原子性，有序性，可见性.
   原子性和有序性统一叫做“多线程执行有序性”.

7. JVM内存划分区域:
   程序计数器 + 线程栈： 线程私有
   堆 + 方法区(常量池)
   本地方法栈
