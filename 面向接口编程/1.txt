1. 模块化设计: 通过暴露接口来提供服务.[rmi和rpc的基础]

2. interface和abstract class区别在于interface约定的是务必要实现的方法和参数，强调规则的制定；
   abstract class则在抽象的同时允许提供一些默认的行为，以达到代码复用的效果。
      以及java本身的单继承和多实现接口.

3. 开发系统时，主体构架使用接口，接口构成系统的骨架.

4. 面向接口编程可以实现接口和实现的分离，这样做的最大好处就是能够在客户端未知的情况下修改实现代码。

   1) 在层与层之间的调用【设计优秀的接口】

   2) 在需求变化性很大的地方【定义接口】

5. 实现:

   1) 分清层次和依赖关系, 一层对下层仅仅是接口依赖,而不依赖于具体的类.

   2) 在实际的设计上:
      1. 定义成员变量时,尽量把成员变量设计成父类或者接口类型;
      2. 定义方法形参时,尽可能的使用父类或者接口类型;
      3. 方法的返回值尽量使用父类或者接口类型.
