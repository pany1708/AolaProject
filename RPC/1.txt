1. rpc框架封装了各种进程之间的相互调用;
2. 最近Java中流行的Netty，是游戏行业做服务器开发的Java程序员用的比较多的PRC框架.
3. Netty这种RPC框架封装和优化了JavaNIO和异步网络编程的一些繁琐的细节，一方面可以让开发者专注于业务逻辑的实现，一方面只需要调用Netty封装的API就可以很快编写出高性能的服务器。

Remote Procedure Call(远程过程调用).

4. [一图表万言](http://www.importnew.com/20327.html)

5.
    Spring：它是最强大的依赖注入框架，也是业界的权威标准。
    Netty：它使 NIO 编程更加容易，屏蔽了 Java 底层的 NIO 细节。
    Protostuff：它基于 Protobuf 序列化框架，面向 POJO，无需编写 .proto 文件。
    ZooKeeper：提供服务注册与发现功能，开发分布式系统的必备选择，同时它也具备天生的集群能力。

6. 轻量级的RPC代表框架: dubbo, hsf(阿里) + Motan(微博)

   grpc(google)

7. java依赖管理工具，如Maven或Gradle:

   maven: pom.xml
   gradle: build.gradle


   最新一代RPC框架HSF，全称High Speed Framework


8. RPC框架是大型互联网公司,系统由成千上万个大大小小的服务组成的,各个服务部署在不同的机器上.
  RPC的出现解决了2个问题:
  1) 依赖他人的远端服务;
  2) 发布自己的服务供他人调用;

9. 向调用本地服务一样调用远程服务,让调用者对网络通信这些细节透明.
   这个实现是对java来说就是代理.

   动态代理和静态代理的区别：
        静态代理：代理类是在编译时就实现好的。也就是说 Java 编译完成后代理类是一个实际的 class 文件.
        动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中.

    动态代理: 避免了重复代码,只需要关注操作.

10. java实现动态代理的方式:
