1. 基本业务数据流
    客户端连上socket登录并保持长连接, 所有个人业务在socket完成, 例如物品, 装备, 经验等.
    客户端发起匹配的时候, socket转发匹配请求到app.
    匹配成功以后app推送给参与对战的客户端所在的socket.
    socket转发匹配成功的消息给客户端.
    socket将玩家对战信息发给battle做准备.
    客户端连上battle并保持连接, 对战业务在battle完成.
    对战结束后, 客户端断开battle连接, battle将对战结果发给socket做结算.

2. 分布式
    socket和battle可以简单地横向扩展, 主要指标是在线人数.
    app需要各种业务自己考虑, 这里仅提供思路. 例如匹配可以拆分成多个匹配池, 分散在多个app进程, 但是2个app进程的用户之间无法匹配到一起.
    代码架构
    socket
    使用btgame-server与客户端通信, 使用rpc与其它进程通信.
    线程模型使用btgame-server内置的用户线程.
    battle
    使用btgame-server与客户端通信, 使用rpc与其它进程通信.
    线程模型自建一个线程池, 每个对战战局绑定一个线程.
    app
    使用rpc与其它进程通信.
    线程模型根据业务不同决定, 可以用全局锁, 也可以自建线程.
