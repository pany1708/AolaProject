1. bean配置有3种方法:
   1) 基于xml配置bean;
   2) 使用注解定义bean;
   3) 基于java类提供bean定义信息;

2. 依赖注入的3种方法:
   1) 属性注入;
   2) 构造函数注入
   3) 工厂方式注入

3. Spring容器启动的3大要素是: Bean定义信息, Bean实现类, Spring本身.

4. 使用注解定于Bean: 【Bean的定义信息通过在Bean实现类上标注注解实现】.
   <bean id="userDao" class="com.baobaotao.anno.UserDao"/>

   @Component("userDao")  对应的等价注解实现方式有3个:
       @Repository：用于对DAO实现类进行标注;
       @Service：用于对Service实现类进行标注;
       @Controller：用于对Controller实现类进行标注;
       之所以要在@Component之外提供这三个特殊的注解, 是为了让注解类本身的用途清晰化，此外Spring将赋予它们一些特殊的功能.

   @Service用于标注业务层组件
   @Controller用于标注控制层组件(如struts中的action)
   @Repository用于标注数据访问组件, 即DAO组件.
   @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注.

5. @Component:

   @Component和<context:component-scan base-package="com.spring"></context:component-scan> 配合实现无XML配置，只通过注解配置及可将类放入资源容器中。

   base-package: 要扫描的包路径.

6. @Resource的注解:

   在容器里面找相应的资源。也可以通过name属性指定它name的资源。可以注解到field或者setter上面.    ===

   <property name="helloWorld" ref="springHelloWorld" />

7.  spring.xml 配置文件的beans节点提供了context的命名空间.

8. <context:component-scan base-package="com.baobaotao" resource-pattern="anno/*.class"/ >: 扫描特定的类, 而非指定包下的所有类.

9. POJO: plain ordinary java obejct[简单的java实体类, 只有get/set方法, 没有业务逻辑]. ===>>> 普通的JavaBean类.

  【区别与EJB】

10. 基于java类提供Bean定义:
在普通的POJO类中只要标注@Configuration注解，就可以为spring容器提供Bean定义的信息了，每个标注了@Bean的类方法都相当于提供了一个Bean的定义信息。


package com.baobaotao.conf;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

//将一个POJO标注为定义Bean的配置类
@Configuration
public class AppConf {
   //以下两个方法定义了两个Bean，以提供了Bean的实例化逻辑

   @Bean
   public UserDao userDao(){
      return new UserDao();
   }

   @Bean
   public LogDao logDao(){
       return new LogDao();
   }

   //定义了logonService的Bean
   @Bean
   public LogonService logonService(){
       LogonService logonService = new LogonService();
       logonService.setLogDao(logDao());
       logonService.setUserDao(userDao());
       return logonService;
   }
}

11. @Scope注解来标注该Bean的作用域.

12. 使用@Resource配置依赖

13. 自动装配与精确装配:
@Autowired
@Qualifier("juniorHighSchool")  // byName

@Autowired是根据类型进行标注的，如需要按照名称进行装配，则需要配合@Qualifier使用进行指定包扫描的component.

@Autowired注解来指定自动装配，使用@Autowired可以标注setter方法，普通方法，Field和构造器等.

要使@Autowired能够工作，还需要在配置文件中加入以下代码:
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

允许Bean标识来指定自动装配。通常会为@Qualifier指定一个名字，表示精确定位id为这个名字的Bean

14. 参考: https://my.oschina.net/itblog/blog/207353

15. @Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按byName自动注入罢了。@Resource有两个属性是比较重要的，
    分别是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。

@Autowired(required = false):
    当不能确定 Spring 容器中一定拥有某个类的 Bean 时，可以在需要自动注入该类 Bean 的地方可以使用 @Autowired(required = false)，这等于告诉 Spring：
在找不到匹配 Bean 时也不报错.

@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上.
@Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，
      如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用


16. @scope注解: 默认值是: singleton[单例模式]

    singleton, prototype, request, session, globalSession作用域;

    基本作用域: singleton + prototype;  web作用域: reqeust、session、globalSession

    singleton单例模式: 全局有且仅有一个实例;

    prototype原型模式: 每次获取Bean的时候会有一个新的实例;

    scope: 作用域; Spring IoC 容器是指其创建的 Bean 对象相对于其他 Bean 对象的请求可见范围

    <bean id="XXX" class="com.XXX.XXXXX" scope="XXXX" />


17. @Autowired按byType自动注入，
    而@Resource默认按byName

18. 相比于 @Autowired 的注解实现 @Required的使用方法:

    @Required：依赖检查;

    基于@Required的依赖检查表示注解的setter方法必须，即必须通过在XML配置中配置setter注入，如果没有配置在容器启动时会抛出异常从而保证在运行时不会遇到空指针异常，
@Required只能放置在setter方法上，且通过XML配置的setter注入;

   使用实例:

1) bean:
public class TestBean {
   private String message;

   @Required
   public void setMessage(String message) {
       this.message = message;
   }
   public String getMessage() {
       return message;
   }
}

<bean id="testBean" class="cn.javass.spring.chapter12.TestBean">
    <property name="message" ref="message"/>
</bean>
<bean id="message" class="java.lang.String">
    <constructor-arg index="0" value="hello"/>
</bean>
