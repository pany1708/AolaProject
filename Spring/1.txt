1. AOP框架可以理解为一个拦截器框架.

2. AOP作为面向对象的一种补充,用于处理系统中分布于各个模块的关注点.

3. 动态代理则不会修改字节码，而是在内存中临时生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。

4. JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类.

5. Spring框架: 简化开发
   1) 管理对象及其依赖关系;
   2) 提供通用的日志记录、性能统计、安全控制、异常处理;
   3) 数据库事务管理, jdbc访问实现;
   4) 提供一套自己的web框架Spring MVC;
   5) 与第3方框架的集成[Java Mail, 任务调度];

 5.1  依赖管理:
       根据配置文件来创建及组装对象间的依赖关系.

 5.2 将非功能性代码分离:
       1) 将通用的分离出去,也必然存在这调用重复.
       2) Spring动态的在需要的地方添加功能.

  5.3 数据库事务管理:
      获取连接，执行SQL，提交或回滚事务，关闭连接

  5.4 容器:
      管理对象的声明周期

6. 框架: 规定了开发的整体框架,提供基础功能,
         非侵入式设计: 无需继承框架提供的类

7. 学习:
   核心是: IOC容器, 理解容器的概念以及如何配置及使用容器, 其它所有技术都是基于容器实现的.

   AOP编程: 基本配置, 实现原理

   数据库事务管理

8. [重要的参考学习系列](http://www.importnew.com/17911.html)
