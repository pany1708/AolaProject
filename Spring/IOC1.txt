1. IOC---控制反转[Inversion Of Control]-----设计思想.  DI---依赖注入[Dependency injection].
   依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”.

2. IOC: 一种设计设计理念:

3. 所有对象都被spring控制:
   所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，
   同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring.

4. IOC的一个重点是: 在系统运行中, 动态的向一个对象提供它锁需要的其它对象,这一点是通过DI来实现的.
   spring就是通过反射来实现注入的, 允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性.

5. Spring的配置文件: applicationContext.xml

    <bean id="animal" class="phz.springframework.test.Cat">
        <property name="name" value="kitty" />
    </bean>

  Spring记载配置文件, 将我们配置的信息保存在一个HashMap中，HashMap的key就是Bean 的 Id ，HasMap 的value是这个Bean.

  依赖注入的思想也很简单，它是通过反射机制实现的，在实例化一个类时，它通过反射调用类中set方法将事先保存在HashMap中的类属性注入到类中.

6. IOC和DI的区别:
   IOC是一种思想, DI是一种设计模式.
   IoC框架使用依赖注入作为实现控制反转的方式, 但是IOC还有其它的实现方式.

7. 在Spring中，每个bean代表一个对象的实例，默认是单例模式，即在程序的生命周期内，所有的对象都只有一个实例，进行重复使用。
   过配置bean，IoC容器在启动的时候会根据配置生成bean实例。

8. 控制反转是一种在软件工程中解耦合的思想，调用类只依赖接口，而不依赖具体的实现类，减少了耦合。控制权交给了容器，在运行的时候才由容器决定将具体的实现动态的
   注入到调用类的对象中。

9. 依赖注入是一种设计模式，可以作为控制反转的一种实现方式。依赖注入就是将实例变量传入到一个对象中去.

10. 控制反转---->>>反转了控制, 倒置了依赖 ---->>> 依赖倒置
